/*
 * list.lmn - List module
 *
 *   Copyright (c) 2008, Ueda Laboratory LMNtal Group <lmntal@ueda.info.waseda.ac.jp>
 *   All rights reserved.
 *
 *   Redistribution and use in source and binary forms, with or without
 *   modification, are permitted provided that the following conditions are
 *   met:
 *
 *    1. Redistributions of source code must retain the above copyright
 *       notice, this list of conditions and the following disclaimer.
 *
 *    2. Redistributions in binary form must reproduce the above copyright
 *       notice, this list of conditions and the following disclaimer in
 *       the documentation and/or other materials provided with the
 *       distribution.
 *
 *    3. Neither the name of the Ueda Laboratory LMNtal Group nor the
 *       names of its contributors may be used to endorse or promote
 *       products derived from this software without specific prior
 *       written permission.
 *
 *   THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 *   "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 *   LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
 *   A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
 *   OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 *   SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 *   LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 *   DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 *   THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 *   (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 *   OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 *
 */


/**
NAME
	List module

SYNOPSIS


AUTHOR
	Koji Hara
        Kazunori Ueda

HISTORY
	2004/05/22(Sat)
        2008/09/18(Sat) Javaのインラインを使用している部分を削除
        2015-07-21(Tue) 仕様再検討対象の機能をコメントアウト
        2019-05-19(Sun) 再検討対象のうち list.flatten のみ仕様変更して復活
*/

{
module(list).

/**
 * list.append(+List1, +List2, -Res)
 *
 * Appends List1 and List2 and binds the result to Res
 */
Z = list.append([], Y) :- Z = Y.
Z = list.append([A|X], Y) :- Z = [A|list.append(X, Y)].

/**
 * list.of_deque(+Deque, -List)
 * 
 * Converts Deque to a list and binds the result to List.
 * @see deque
 */
H = list.of_deque(deque.new(Front,Front)) :- H = [].
H = list.of_deque(deque.new(Front,Back)) :- H = Front, Back = [].

/**
 * list.choose_k(+List, +K, -Res)
 *
 * Generates a list of all ways of choosing K elements from List and binds it to Res.
 *
 * @example
 * r = choose_k([a, b, c, d, e], 3).
 * r = choose_k([b, c], 1).
 */
H = list.choose_k(L, K) :- ground(L), K=0 | H = [[]].
H = list.choose_k([], K) :- int(K), K=\=0 | H = [].
// Hd を選ぶ場合とそうでない場合の全組み合わせをくっつける 
H = list.choose_k([Hd|Tl], K) :- int(K), ground(Tl), K1 = K-1 |
    H = list.append(list.dist(Hd, list.choose_k(Tl, K1)),
                    list.choose_k(Tl, K)).

// map (cons A) L
H = list.dist(A, []) :- ground(A) | H = [].
H = list.dist(A, [Hd|Tl]) :- ground(A) | H = [[A|Hd]|list.dist(A, Tl)].

/**
 * list.split(+List, +N, -Tail, -Head)
 *
 * Trims List after the first N element and binds it to Head and the rest to Tail.
 * 2006.2.28 by inui
 */
Head = list.split(X, N, Tail) :- N=0    | Head = [], Tail = X.
Head = list.split([], N, Tail) :- int(N) | Head = [], Tail = [].
Head = list.split([A|X], N, Tail) :- N>0, N1 = N-1 |
    Head = [A|list.split(X, N1, Tail)].

/**
 *  list.length(List, Len, NewList)
 *  list.length(List, Origin, Len, NewList)
 *  
 *  Bind the length of List to Len and return List to NewList
 *  2006/06/07 Sasaki
 */
Y = list.length(X, N) :- Y = list.length(X, 0, N).

Y = list.length([], N0, N) :- Y = [], N = N0.
Y = list.length([A|X], N0, N) :- N1 = N0+1 |
    Y = [A|list.length(X, N1, N)].

/**
 * list.reverse(+List, -ReversedList)
 *
 * Reverse List and binds it to ReversedList.
 * 2006/07/05 inui
 */
Y = list.reverse(X) :- Y = list.reverse(X, []).
Y = list.reverse([], U) :- Y = U.
Y = list.reverse([A|X], U) :- Y = list.reverse(X, [A|U]).

/**
 * list.flatten(+List, -Res)
 *
 * @example
 *  r = list.flatten([[a,b,c],[d,e],[],[[f,g]]]).
 *    ==>
 *  r = list.flatten([a,b,c,d,e,[f,g]])
 */
Y = list.flatten([]) :- Y = [].
Y = list.flatten([A|X]) :- Y = list.append(A,list.flatten(X)).

// TODO: list.update と list.set の一本化
/**
 *  list.update(List, N, X, NewList, Old)
 *
 *  ListのN番目(N=0,1,2,...)の要素を新要素Xで置換し、置換対象となった要素Oldを返します。
 *  ただし、N > list.length(List) の場合は置換は行わず、Xをそのまま返します。
 *  2006/06/07 佐々木
 */
// H=list.update([], N, X, Ls) :- N>0 | H=X, Ls=[].
// H=list.update([Head|Tail], N, X, Ls) :- N=0 | H=Head, Ls=[X|Tail].
// H=list.update([Head|Tail], N, X, Ls) :- N>0 | H=list.update(Tail,N-1,X,Ls1), Ls=[Head|Ls1].

/**
 * list.set(+List, +N, +New, -Old, -NewList)
 *
 * List の N 番目(N=0,1,2,...)の要素に New をセットしたリストを返します．
 * 元々あった要素は Old に返します．
 * List が空だったり，リストの長さを超えてセットしようとした場合は
 * リストは変更されず，セットしようとした要素は Old に 返ります．
 * 2006/09/23 inui
 */
// H=list.set([], N, New, Old) :- int(N) | H=[], Old=New.
// H=list.set([Head|Tail], N, New, Old) :- N = 0 | H=[New|Tail], Old=Head.
// H=list.set([Head|Tail], N, New, Old) :- N > 0 | H=[Head|list.set(Tail,N-1,New,Old)].

}.

