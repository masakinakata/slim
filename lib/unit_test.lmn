/*
 * unit_test.lmn
 *
 *   Copyright (c) 2017, Ueda Laboratory LMNtal Group <lmntal@ueda.info.waseda.ac.jp>
 *   All rights reserved.
 *
 *   Redistribution and use in source and binary forms, with or without
 *   modification, are permitted provided that the following conditions are
 *   met:
 *
 *    1. Redistributions of source code must retain the above copyright
 *       notice, this list of conditions and the following disclaimer.
 *
 *    2. Redistributions in binary form must reproduce the above copyright
 *       notice, this list of conditions and the following disclaimer in
 *       the documentation and/or other materials provided with the
 *       distribution.
 *
 *    3. Neither the name of the Ueda Laboratory LMNtal Group nor the
 *       names of its contributors may be used to endorse or promote
 *       products derived from this software without specific prior
 *       written permission.
 *
 *   THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 *   "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 *   LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
 *   A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
 *   OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 *   SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 *   LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 *   DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 *   THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 *   (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 *   OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 *
 */

{
  module(unit_test).

  /**
   * usage:
   *   you have to write a test suite with following structure:
   *
   *     tap_producer = {
   *       test_suite = {
   *         test_case = {
   *           init = { ... }.
   *           ruleset = { ... }.
   *           stable = { ... }.
   *         }.
   *         ...
   *       }.
   *     }.
   *
   *   you must write three attributes in a test case:
   *     `init` contains a graph of the initial state.
   *     `ruleset` contains rulesets applied to `init`.
   *     `stable` contains a desired graph after all the reactions of `ruleset` finished.
   *
   *   you may have multiple test cases in a test suite.
   *
   *   you can also write these attributes in test cases:
   *     `name` is displayed in the results.
   *     `message` is displayed only when the test is failed.
   *
   *   you can provide common routines in a test suite with:
   *     `setup` that is included by each test case before the reaction and
   *     `teardown` that is included by each test case after the reaction and before checking.
   *
   *   The results of the test suite is printed through `io.stdout`.
   *   Its format conforms to TAP (Test Anything Protocol), so you can analyze the results with some test harness.
   *
   *   Example:
   *     tap_producer = {
   *       test_suite = {
   *         setup = {}.
   *     
   *         test_case = {
   *           name = "append case 1".
   *           init = {
   *             append(c(1,c(2,c(3,n))),c(4,c(5,n)),result).
   *           }.
   *     
   *           ruleset = {
   *             append(X,Y,Z), n(X) :- Y = Z.
   *             append(X,Y,Z), c(A,X1,X) :- c(A,Z1,Z), append(X1,Y,Z1).
   *           }.
   *     
   *           stable = {
   *             result(c(1,c(2,c(3,c(4,c(5,n)))))).
   *           }.
   *         }.
   *     
   *         test_case = {
   *           init = {
   *             append([1,2,3],[4,5],result).
   *           }.
   *     
   *           ruleset = {
   *             Z = append([],Y) :- Y = Z.
   *             Z = append([A|X],Y) :- Z = [A|append(X,Y)].
   *           }.
   *     
   *           stable = {
   *             result([1,2,3,4,5]).
   *           }.
   *     
   *           message = "should be 'result([1,2,3,4,5])'"
   *         }.
   *     
   *         teardown = {}.
   *       }.
   *     }.
   */

  tap_producer = {
    $p, @p
  } :-
    tap_producing = {
      $p, @p.

      test_suite = {
        $p[], @p.
        setup = { $q[], @q }.
        test_case = { init = { $r[], @r }, $rest[] }.
      } :-
        test_suite = {
          $p[], @p.
          setup = { $q[], @q }.
          test_launching = {
            body = { $r[], @r, $q[], @q }.
            $rest[].
          }.
        }.

      test_suite = {
        $p[], @p.
        test_launching = {
          body = { $q[], @q }.
          ruleset = { @r }.
          $rest[].
        }/
      } :-
        test_suite = {
          $p[], @p.
          test_running = {
            body = { $q[], @q, @r }.
            $rest[].
          }.
        }.

      test_suite = {
        $p[], @p.
        teardown = { $q[], @q }.
        test_running = {
          $r[].
          body = { $body[], @body }.
        }/
      } :-
        test_suite = {
          $p[], @p.
          teardown = { $q[], @q }.
          test_terminating = {
            $r[].
            body = { $q[], @q. $body[], @body }.
          }.
        }.

      test_suite = {
        $p[], @p.
        test_terminating = {
          $q[].
          body = { $body[], @body }.
          stable = { $r[] }.
        }/
      } :-
        test_suite = {
          $p[], @p.
          test_checking(membrane.eq({ $body[] }, { $r[] }, M1, M2), "", "", M1, M2) = {
            $q[].
          }.
        }.

      test_suite = {
        $p[], @p.
      }/ :-
        test_suite_finished = {
          $p[], @p.
          results([]).
          num_cases = 0.
        }.

      test_suite_finished = {
        $p[Pred], @p.
        test_checking(Pred, $placeholder, $msg, { $q[] }, { $r[] }) = {
          name = $name.
          $attrs[].
        }.
      } :- string($placeholder), string($name), string($msg) |
        test_suite_finished = {
          $p[Pred], @p.
          test_checking(Pred, $name, $msg, { $q[] }, { $r[] }) = {
            $attrs[].
          }.
        }.

      test_suite_finished = {
        $p[], @p.
        test_checking(true, $name, $placeholder, { $q[] }, { $r[] }) = {
          message = $msg.
          $attrs[].
        }.
      } :- string($placeholder), string($name), string($msg) |
        test_suite_finished = {
          $p[], @p.
          test_checking(true, $name, $placeholder, { $q[] }, { $r[] }) = {
            $attrs[].
          }.
        }.

      test_suite_finished = {
        $p[], @p.
        test_checking(false, $name, $placeholder, { $q[] }, { $r[] }) = {
          message = $msg.
          $attrs[].
        }.
      } :- string($placeholder), string($name), string($msg) |
        test_suite_finished = {
          $p[], @p.
          test_checking(false, $name, $msg, { $q[] }, { $r[] }) = {
            $attrs[].
          }.
        }.

      test_suite_finished = {
        $p[R], @p.
        results = R.
        test_checking($tf, $name, $msg, { $q[] }, { $r[] }) = {}.
        num_cases = $c.
      } :- $cc = $c + 1, unary($tf), string($name), string($msg) |
        test_suite_finished = {
          $p[R], @p.
          results = [result($tf, $name, $msg) | R].
          num_cases = $cc.
        }.

      test_suite_finished = {
        $p[], @p.
        results = $q[].
        num_cases = $c.
      }/ :- int($c), ground($q) |
        results($c, $q[]).
    }.

  tap_producing = { $p, @p }/ :- tap_produced(0) = {
    $p, @p.

    print_results(Rs) :-
      io.free_port(io.print(io.stdout, Results)),
      Results = print_results(Rs).
    Str = print_results([result(true, $name, $msg) | T]) :- string($name), string($msg) |
      S = string.concat("ok ", string.concat(" - ", string.concat($name, $msg))),
      Str = string.concat(string.concat(S, "\n"), print_results(T)).
    Str = print_results([result(false, $name, $msg) | T]) :- string($name), string($msg) |
      S = string.concat("not ok ", string.concat(" - ", string.concat($name, $msg))),
      Str = string.concat(string.concat(S, "\n"), print_results(T)).
    Str = print_results([]) :-
      Str = "".
  }.

  tap_produced($n) = {
    $p, @p.
    results($c, $q[]).
  } :- $nn = $n + $c, ground($q) |
    tap_produced($nn) = {
      $p, @p.
      print_results($q[]).
    }.

  tap_produced($n) = { $p[], @p }/ :- int($n) |
    io.free_port(io.print(io.stdout, string.concat(string.concat("1..", string.from($n)), "\n# "))).
}.
