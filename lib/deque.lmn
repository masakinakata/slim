/*
 * deque.lmn - Deque (Double-ended queue) module
 *
 *   Copyright (c) 2008, Ueda Laboratory LMNtal Group <lmntal@ueda.info.waseda.ac.jp>
 *   All rights reserved.
 *
 *   Redistribution and use in source and binary forms, with or without
 *   modification, are permitted provided that the following conditions are
 *   met:
 *
 *    1. Redistributions of source code must retain the above copyright
 *       notice, this list of conditions and the following disclaimer.
 *
 *    2. Redistributions in binary form must reproduce the above copyright
 *       notice, this list of conditions and the following disclaimer in
 *       the documentation and/or other materials provided with the
 *       distribution.
 *
 *    3. Neither the name of the Ueda Laboratory LMNtal Group nor the
 *       names of its contributors may be used to endorse or promote
 *       products derived from this software without specific prior
 *       written permission.
 *
 *   THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 *   "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 *   LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
 *   A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
 *   OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 *   SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 *   LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 *   DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 *   THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 *   (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 *   OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 *
 */

/*
NAME
	Deque (Double-ended queue) module

SYNOPSIS
	r=deque.pop_front(deque.push_back(deque.push_back(deque.new, abc),123),v1).
	==>
	v1(abc), r(deque.new([123|Q],Q))

	r=deque.of_list([1,2,3]) ==> r(deque.new([1,2,3|Q],Q))

DESCRIPTION
	Deque implemented as a difference list.         

AUTHOR
	Koji Hara
	Kazunori Ueda

HISTORY
	2004/05/17(Mon)
        2019-05-25(Sat) switched from queue to deque
*/

{
module(deque).

/**
 * deque.new(-Q)
 * Creates an empty queue and binds it to Q.
 * 
 */
Q = deque.new :- Q = deque.new(Front,Back), Front = Back.

/**
 * deque.is_empty(+Q0,-Res,-Q)
 * 
 */
Q = deque.is_empty(deque.new(F,F), Res) :-
    Res = true, Q = deque.new(F,F).
Q = deque.is_empty(deque.new([X|F],B), Res) :-
    Res = false, Q = deque.new([X|F],B).

/**
 * deque.push_front(+Q0,+X,-Q) -- insert X at front
 * 
 */
Q = deque.push_front(deque.new(F,B), X) :- Q = deque.new([X|F],B).

/**
 * deque.pop_front(+Q0,-X,-Q) -- remove the first element
 * The queue must be non-empty.
 *
 */
Q = deque.pop_front(deque.new([X|F],B), R) :- R = X, Q = deque.new(F,B).

/**
 * deque.push_back(+Q0,+X,-Q) -- insert X at back
 * 
 */
Q = deque.push_back(deque.new(F,B0), X) :- B0 = [X|B], Q = deque.new(F,B).

/**
 * deque.pop_back(+Q0,-X,-Q) -- remove the last element
 * The queue must be non-empty.
 *
 */
Q = deque.pop_back(deque.new(F,B0), R), B = [X|B0] :- R = X, Q = deque.new(F,B). 

/**
 * deque.of_list(+L,-Q)
 *
 */
Q = deque.of_list(L) :- Q = deque.of_list_s0(L, deque.new).

Q = deque.of_list_s0([], Q0) :- Q = Q0.
Q = deque.of_list_s0([X|L], Q0) :-
    Q = deque.of_list_s0(L, deque.push_back(Q0,X)).

}

