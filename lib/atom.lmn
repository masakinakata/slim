/*
 * atom.lmn - atom module
 *
 *   Copyright (c) 2008, Ueda Laboratory LMNtal Group <lmntal@ueda.info.waseda.ac.jp>
 *   All rights reserved.
 *
 *   Redistribution and use in source and binary forms, with or without
 *   modification, are permitted provided that the following conditions are
 *   met:
 *
 *    1. Redistributions of source code must retain the above copyright
 *       notice, this list of conditions and the following disclaimer.
 *
 *    2. Redistributions in binary form must reproduce the above copyright
 *       notice, this list of conditions and the following disclaimer in
 *       the documentation and/or other materials provided with the
 *       distribution.
 *
 *    3. Neither the name of the Ueda Laboratory LMNtal Group nor the
 *       names of its contributors may be used to endorse or promote
 *       products derived from this software without specific prior
 *       written permission.
 *
 *   THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 *   "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 *   LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
 *   A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
 *   OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 *   SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 *   LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 *   DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 *   THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 *   (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 *   OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

/**
NAME
	Atom module

SYNOPSIS

AUTHOR
	Kazunori Ueda

HISTORY
	2015/07/19(Mon)
	2019-05-19(Sun)
*/

{
module(atom).

/*
 * A = atom.new(F, N):
 *
 * Creates a symbol atom with the functor F (specified as a string)
 * and N (< 128) arguments.
 * If N>0, the first N-1 arguments are set to 0, while the last
 * argument is connected to the binary atom 'some' connected to the
 * created atom and A.
 * For instance, A=atom.new("pq",3) creates A=some(pq(0,0)).
 * If N=0, A=atom.new("pq",0) creates A=none and an independent atom
 * 'pq'.
 */

A = atom.new(F,N) :- string(F), N>=0 |
    A='$callback'('cb_atom_new',F,N).

/*
 * atom.new(F, L, A):
 *
 * Creates a symbol atom with the functor F (specified as a string)
 * and the arguments in the list L and the final argument A.
 * For instance, atom.new("pq",[X,Y,Z],A) creates A = pq(X,Y,Z).
 */

A = atom.new(F,[]) :- string(F) | atom.update(atom.new(F,1), A, []).
A = atom.new(F,[X|Xs]) :- string(F) | 
    list.length([X|Xs], 1,N, NewXs), 
    atom.update(atom.new(F,N), A, NewXs).

/*
 * atom.new(F, L):
 *
 * Creates a symbol atom with the functor F (specified as a string)
 * and the arguments in the list L.
 * For instance, atom.new("pq",[X,Y,Z]) creates pq(X,Y,Z).
 */

atom.new(F,[]) :- string(F) | atom.update(atom.new(F,0), []).
atom.new(F,[X|Xs]) :- string(F) | 
    list.length([X|Xs], 0,N, NewXs), 
    atom.update(atom.new(F,N), NewXs).

/*
 * atom.update(some(A), Final, L):
 *
 * Fills the arguments of A with the elements of L and the Final value.
 * For instance, atom.update(some(p(0,0)),some(c),[a,b]) becomes
 * c=p(a,b) or p(a,b,c).
 */

atom.update(some(A0), Final, Xs) :- atom.update(A0, 0, 0, Final, Xs).

// The third arg of atom.update/5 is garbage from the previous iteration.
// Use trace mode to see how the base case works.
atom.update(A0, K, G, Final, []) :- int(K), int(G) | Final = A0.
atom.update(A0, K, G, Final, [X|Xs]) :- K1 = K+1, int(G) |
    atom.swap(A0, K, X, X1, A1), 
    atom.update(A1, K1, X1, Final, Xs).

/*
 * atom.update(A option, L):
 *
 * Fills the arguments of A with the elements of L.
 * For instance, atom.update(some(p(0,0)),[a,b,c]) becomes p(a,b,c),
 * while the 'none' case is just for garbage collection.
 */

atom.update(some(A0), Xs) :- atom.update(A0, 0, 0, Xs).
atom.update(none, []) :- .

// The third arg of atom.update/4 is garbage from the previous iteration.
// Use trace mode to see how the base works.
atom.update(A0, K, G, [Final]) :- int(K), int(G) | Final = A0.
atom.update(A0, K, G0, [X,X1|Xs]) :- K1 = K+1, int(G0) |
    atom.swap(A0, K, X, G, A1), 
    atom.update(A1, K1, G, [X1|Xs]).

/*
 * A = atom.functor(A0, F, N):
 *
 * F is bound to the string representation of the functor of A0
 * and N is bount to the arity of A0.
 * Works only when A0 is a symbol atom.
 */

A=atom.functor(A0,F,N) :- // works for symbol atoms only for now
  '$callback'('cb_atom_functor',A0,F,N,A).

/*
 * A = atom.swap(A0, I, NewAi, OldAi):
 * 
 * A is bound to the atom A0 whose Ith argument is changed to NewAi.
 * The original Ith argument is bound to OldAi.
 * Works only when A0 and OldAi are symbol atoms.
 */

A=atom.swap(A0, I, NewAi, OldAi) :- int(I) |
    '$callback'('cb_atom_swap', A0,I,NewAi,OldAi,A).

}.
