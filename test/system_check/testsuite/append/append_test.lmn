
unit_test.use.

test_suite = {
	setup = {}.

	test_case = {
		name = "append case 1".
		init = {
			append(c(1,c(2,c(3,n))),c(4,c(5,n)),result).
		}.

		ruleset = {
			append(X,Y,Z), n(X) :- Y = Z.
			append(X,Y,Z), c(A,X1,X) :- c(A,Z1,Z), append(X1,Y,Z1).
		}.

		stable = {
			result(c(1,c(2,c(3,c(4,c(5,n)))))).
		}.
	}.

	test_case = {
		init = {
			append([1,2,3],[4,5],result).
		}.

		ruleset = {
			Z = append([],Y) :- Y = Z.
			Z = append([A|X],Y) :- Z = [A|append(X,Y)].
		}.

		stable = {
			result([1,2,3,4,5]).
		}.

		msg = "should be 'result([1,2,3,4,5])'"
	}.

	teardown = {}.
}.

////////

{
	module(unit_test).

	test_suite = {
		$p[], @p.
		setup = { $q[], @q }.
		test_case = { init = { $r[] }, ruleset = { @r }, $rest[] }.
	} :-
		test_suite = {
			$p[], @p.
			setup = { $q[], @q }.
			test_running = {
				body = { $r[], @r, $q[], @q }.
				$rest[].
			}.
		}.

	test_suite = {
		$p[], @p.
		teardown = { $q[], @q }.
		test_running = {
			$r[].
			body = { $body[], @body }.
		}/
	} :-
		test_suite = {
			$p[], @p.
			teardown = { $q[], @q }.
			test_terminating = {
				$r[].
				body = { $q[], @q. $body[], @body }.
			}.
		}.

	test_suite = {
		$p[], @p.
		test_terminating = {
			$q[].
			body = { $body[], @body }.
			stable = { $r[] }.
		}/
	} :-
		test_suite = {
			$p[], @p.
			test_checking(membrane.eq({ $body[] }, { $r[] }, M1, M2), "", "", M1, M2) = {
				$q[].
			}.
		}.

	test_suite = {
		$p[], @p.
	}/ :-
		test_suite_finished = {
			$p[], @p.
			results([]).
			num_cases = 0.
		}.

	test_suite_finished = {
		$p[Pred], @p.
		test_checking(Pred, $placeholder, $msg, { $q[] }, { $r[] }) = {
			name = $name.
			$attrs[].
		}.
	} :- string($placeholder), string($name), string($msg) |
		test_suite_finished = {
			$p[Pred], @p.
			test_checking(Pred, $name, $msg, { $q[] }, { $r[] }) = {
				$attrs[].
			}.
		}.

	test_suite_finished = {
		$p[], @p.
		test_checking(true, $name, $placeholder, { $q[] }, { $r[] }) = {
			msg = $msg.
			$attrs[].
		}.
	} :- string($placeholder), string($name), string($msg) |
		test_suite_finished = {
			$p[], @p.
			test_checking(true, $name, $placeholder, { $q[] }, { $r[] }) = {
				$attrs[].
			}.
		}.

	test_suite_finished = {
		$p[], @p.
		test_checking(false, $name, $placeholder, { $q[] }, { $r[] }) = {
			msg = $msg.
			$attrs[].
		}.
	} :- string($placeholder), string($name), string($msg) |
		test_suite_finished = {
			$p[], @p.
			test_checking(false, $name, $msg, { $q[] }, { $r[] }) = {
				$attrs[].
			}.
		}.

	test_suite_finished = {
		$p[R], @p.
		results = R.
		test_checking($tf, $name, $msg, { $q[] }, { $r[] }) = {}.
		num_cases = $c.
	} :- $cc = $c + 1, unary($tf), string($name), string($msg) |
		test_suite_finished = {
			$p[R], @p.
			results = [result($tf, $name, $msg) | R].
			num_cases = $cc.
		}.

	test_suite_finished = {
		$p[], @p.
		results = $q[].
		num_cases = $c.
	}/ :- int($c), ground($q) |
		print_results($c, $q[]).

	print_results($i, Rs) :- int($i) |
		io.print_line(io.stdout, string.concat("1..", string.from($i)), Port),
		print_results(1, Rs, Port).
	print_results($i, [result(true, $name, $msg) | T], Port) :- $ii = $i + 1, string($name), string($msg) |
		io.print_line(Port, string.concat(string.concat("ok ", string.from($i)), string.concat(" - ", string.concat($name, $msg))), P),
		print_results($ii, T, P).
	print_results($i, [result(false, $name, $msg) | T], Port) :- $ii = $i + 1, string($name), string($msg) |
		io.print_line(Port, string.concat(string.concat("not ok ", string.from($i)), string.concat(" - ", string.concat($name, $msg))), P),
		print_results($ii, T, P).
	print_results($i, [], Port) :- int($i) |
		io.print(Port, "# ", io.free_port).
}.
