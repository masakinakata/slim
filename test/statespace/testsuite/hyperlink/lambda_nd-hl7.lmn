/*---------------------------------------------------------
Encoding of the Lambda Calculus and Church Numerals

For details, please see:
Ueda, K., Towards a Substrate Framework of Computation.
In Concurrent Objects and Beyond, LNCS 8665, Springer, 2014,
pp.341-366, DOI:10.1007/978-3-662-44471-9_15.

The original (non-hypergraph) version is described in:
Ueda, K., Encoding the Pure Lambda Calculus into Hierarchical
Graph Rewriting, RTA 2008, LNCS 5117, 2008, pp.392-408.
---------------------------------------------------------*/

beta@@ H=apply(lambda(A, B), C) :- H=B, A=C.

l_c@@  lambda(A,B)=cp(C,D,!L,!M) :-
         C=lambda(E,F), D=lambda(G,H), 
         A=cpc(E,G,!L1,!M1), B=cp(F,H,!L2,!M),
         sub(!L1,!L2,!L), subc(!M1), .
a_c@@  apply(A,B)=cp(C,D,!L,!M) :-
         C= apply(E,F), D= apply(G,H),
         A=cp(E,G,!L,!M1), B=cp(F,H,!L,!M2), !M=jn(!M1,!M2).

c_c1@@ cpc(A,B,!L1,!M1)=cp(C,D,!L2,!M2), sub(!L1,!L2,!L) :-
         A=C, B=D, sub(!L1,!L2,!L), !L1 >< !M1, !L2 >< !M2.
c_c2@@ cpc(A,B,!L1,!M1)=cp(C,D,!L2,!M2), top(!L2) :-
         C=cpc(E,F,!L1,!M11), D=cpc(G,H,!L1,!M12), !M1=jn(!M11,!M12),
         A=cp(E,G,!L2,!M21), B=cp(F,H,!L2,!M22), !M2=jn(!M21,!M22),
         top(!L2).
f_c@@  fv($u)=cp(A,B,!L,!M) :- unary($u) | A=fv($u), B=fv($u), !L >< !M.

l_r@@  lambda(A,B)=rm :- A=rmc, B=rm.
a_r@@  apply(A,B)=rm :- A=rm, B=rm.
c_r1@@ cp(A,B,!L,!M)=rmc :- A=rmc, B=rmc, !L >< !M.
c_r2@@ cpc(A,B,!L,!M)=rm :- A=rm, B=rm, !L >< !M.
r_r@@  rmc=rm :- .
f_r@@  fv($u)=rm :- unary($u) | .

promote@@ subc(!L1), sub(!L1,!L2,!L3) :- !L2 >< !L3.
join@@ !Y=jn(!X,!X) :- !X >< !Y.
c2c@@  A=cp(B,C) :- A=cp(B,C,!L,!M), top(!L), topc(!M).
gc@@   top(!L), topc(!L) :- .

// exponentiation of natural numbers in Church encoding
// n is encoded as f^n x // then n^m is encoded as lambda n m -> m n

N=n(0) :- N=lambda(rm, lambda(X, X)).
N=n(1) :- N=lambda(F, lambda(X, apply(F,X))).
N=n(2) :- N=lambda(cp(F0,F1), lambda(X,
              apply(F0,apply(F1,X)))).
N=n(3) :- N=lambda(cp(F0,cp(F1,F2)), lambda(X,
              apply(F0,apply(F1,apply(F2,X))))).
N=n(4) :- N=lambda(cp(F0,cp(F1,cp(F2,F3))), lambda(X,
              apply(F0,apply(F1,apply(F2,apply(F3,X)))))).
// r=apply(apply(apply(n(2), n(2)),fv(s)),fv(0)).
// r=apply(n(2),apply(n(2), n(2))).
r=apply(n(2), n(2)).
