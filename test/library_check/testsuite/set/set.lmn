
unit_test.use.

tap_producer = {
  test_suite = {
    setup = {
      set.use.
    }.

    test_case = {
      name = "integer set case 1".
      init = {
        set(set.insert(set.insert(set.insert(set.insert(set.insert(set.init, 1), 3), 5), 7), 9)).
      }.

      ruleset = {
        set(X) :- set.find(X, 7, res, ret).
      }.

      stable = {
        res(some).
      }.
    }.

    test_case = {
      name = "integer set case 2".
      init = {
        set(set.insert(set.insert(set.insert(set.insert(set.insert(set.init, 1), 3), 5), 7), 9)).
      }.

      ruleset = {
        set(X) :- set.find(X, 10, res, ret).
      }.

      stable = {
        res(none).
      }.
    }.

    test_case = {
      name = "membrane set case 1".
      init = {
        set(set.insert(set.insert(set.insert(set.init, {a, a}), {b, b}), {c})).
      }.

      ruleset = {
        set(X) :- set.find(X, {a, a}, res, ret).
      }.

      stable = {
        res(some).
      }.
    }.

    test_case = {
      name = "membrane set case 2".
      init = {
        set(set.insert(set.insert(set.insert(set.init, {a, a}), {b, b}), {c})).
      }.

      ruleset = {
        set(X) :- set.find(X, {}, res, ret).
      }.

      stable = {
        res(none).
      }.
    }.

    test_case = {
      name = "tuple set case 1".
      init = {
        set(set.insert(set.insert(set.insert(set.init, (1, 2)), (3, 4)), (4, 5))).
      }.

      ruleset = {
        set(X) :- set.find(X, (3, 4), res, ret).
      }.

      stable = {
        res(some).
      }.
    }.

    test_case = {
      name = "tuple set case 2".
      init = {
        set(set.insert(set.insert(set.insert(set.init, (1, 2)), (3, 4)), (4, 5))).
      }.

      ruleset = {
        set(X) :- set.find(X, hoge(3, 4), res, ret).
      }.

      stable = {
        res(some).
      }.
    }.

    test_case = {
      name = "tuple set case 3".
      init = {
        set(set.insert(set.insert(set.insert(set.init, tup(1, 2, 3)), tup(3, 4, 0)), tp(4, 5, 9))).
      }.

      ruleset = {
        set(X) :- set.find(X, a(3, 4, 0), res, ret).
      }.

      stable = {
        res(some).
      }.
    }.

    test_case = {
      name = "tuple set case 4".
      init = {
        set(set.insert(set.insert(set.insert(set.init, tup(1, 2, 3)), tup(3, 4, 0)), tp(4, 5, 9))).
      }.

      ruleset = {
        set(X) :- set.find(X, tup(3, 4, 10), res, ret).
      }.

      stable = {
        res(none).
      }.
    }.

    teardown = {
      set.use :- .
      ret = $set :- class($set, "set") | .
    }.
  }.

  test_suite = {
    setup = {
      set.use.
    }.

    test_case = {
      name = "set to list case 1".
      init = {
        ret = set.to_list(set.init).
      }.

      ruleset = {}.

      stable = {
        ret = [].
      }.
    }.

    test_case = {
      name = "set to list case 2".
      init = {
        set(set.insert(set.insert(set.insert(set.insert(set.insert(set.init, 1), 3), 5), 7), 9)).
      }.

      ruleset = {
        set(X) :- ret = set.to_list(X).
      }.

      stable = {
        ret = [1, 3, 5, 7, 9].
      }.
    }.

    teardown = {
      set.use :- .
    }.
  }.

  test_suite = {
    setup = {
      set.use.
    }.

    test_case = {
      name = "set copy case 1".
      init = {
        ret = set.to_list(set.copy(set.insert(set.insert(set.init, 1), 2), X)).
        ret = set.to_list(X).
      }.

      ruleset = {
        ret = A, ret = B :- A = B | ok.
      }.

      stable = {
        ok.
      }.
    }.

    teardown = {
      set.use :- .
    }.
  }.

  test_suite = {
    setup = {
      set.use.
    }.

    test_case = {
      name = "set erase case 1".
      init = {
        set(set.insert(set.insert(set.insert(set.insert(set.insert(set.init, 1), 3), 5), 7), 9)).
      }.

      ruleset = {
        set(X) :-
          S1 = set.find(X, 7, r1),
          S2 = set.find(S1, 5, r2),
          S3 = set.find(S2, 4, r3),
          S4 = set.erase(S3, 7),
          S5 = set.find(S4, 7, r4),
          S6 = set.find(S5, 5, r5),
          ret = set.find(S6, 4, r6).
          ret($set) :- class($set, "set") | .
      }.

      stable = {
        r1 = some, r2 = some, r3 = none.
        r4 = none, r5 = some, r6 = none.
      }.
    }.

    test_case = {
      name = "set erase case 2".
      init = {
        set(set.insert(set.insert(set.insert(set.init, {a, a}), {b, b}), {c})).
      }.

      ruleset = {
        set(X) :-
          S1 = set.find(X, {a, a}, r1),
          S2 = set.find(S1, {c}, r2),
          S3 = set.find(S2, {a}, r3),
          S4 = set.erase(S3, {a, a}),
          S5 = set.find(S4, {a, a}, r4),
          S6 = set.find(S5, {c}, r5),
          ret = set.find(S6, {a}, r6).
          ret($set) :- class($set, "set") | .
      }.

      stable = {
        r1 = some, r2 = some, r3 = none.
        r4 = none, r5 = some, r6 = none.
      }.
    }.

    teardown = {
      set.use :- .
    }.
  }.

  test_suite = {
    setup = {
      set.use.
    }.

    test_case = {
      name = "union set case 1".
      init = {
        a = set.insert(set.insert(set.insert(set.init, 1), 2), 4).
        b = set.insert(set.insert(set.insert(set.init, 1), 3), 9).
      }.

      ruleset = {
        a = A, b = B :- 
          S0 = set.union(A, B),
          S1 = set.find(S0, 1, r1),
          S2 = set.find(S1, 2, r2),
          S3 = set.find(S2, 9, r3),
          ret = set.find(S3, 5, r4).
        ret = $set :- class($set, "set") | .
      }.

      stable = {
        r1 = some, r2 = some, r3 = some, r4 = none.
      }.
    }.

    teardown = {
      set.use :- .
    }.
  }.

  test_suite = {
    setup = {
      set.use.
    }.

    test_case = {
      name = "intersect set case 1".
      init = {
        a = set.insert(set.insert(set.insert(set.init, 1), 2), 4).
        b = set.insert(set.insert(set.insert(set.init, 1), 3), 9).
      }.

      ruleset = {
        a = A, b = B :- 
          S0 = set.intersect(A, B),
          S1 = set.find(S0, 1, r1),
          S2 = set.find(S1, 2, r2),
          S3 = set.find(S2, 9, r3),
          ret = set.find(S3, 5, r4).
        ret = $set :- class($set, "set") | .
      }.

      stable = {
        r1 = some, r2 = none, r3 = none, r4 = none.
      }.
    }.

    teardown = {
      set.use :- .
    }.
  }.

  test_suite = {
    setup = {
      set.use.
    }.

    test_case = {
      name = "diff set case 1".
      init = {
        a = set.insert(set.insert(set.insert(set.init, 1), 2), 4).
        b = set.insert(set.insert(set.insert(set.init, 1), 3), 9).
      }.

      ruleset = {
        a = A, b = B :- 
          S0 = set.diff(A, B),
          S1 = set.find(S0, 1, r1),
          S2 = set.find(S1, 2, r2),
          S3 = set.find(S2, 9, r3),
          ret = set.find(S3, 5, r4).
        ret = $set :- class($set, "set") | .
      }.

      stable = {
        r1 = none, r2 = some, r3 = none, r4 = none.
      }.
    }.

    teardown = {
      set.use :- .
    }.
  }.
}.
